clear;
load("params.mat", 'params');
cameraMatrix1 = cameraMatrix(params.CameraParameters1, eye(3), [0 0 0]);
cameraMatrix2 = cameraMatrix(params.CameraParameters2, ...
    params.RotationOfCamera2, params.TranslationOfCamera2);
F = params.FundamentalMatrix;
f1 = params.CameraParameters1.FocalLength;
p1 = params.CameraParameters1.PrincipalPoint;
pxPitch = 0.0022;

intrinsics = [f1(1), 0, p1(1);
              0, f1(2), p1(2);
              0, 0, 1]; % mm
N = 8; % F-stop
fl = f1(1) * pxPitch;
desiredResolution = 0.020; %mm/px
WD = fl * desiredResolution/pxPitch;
rng(1,'twister');

imageSizeY = 1944;
imageSizeX = 2592;


%% Generate and filter particles that do not fall in the image frame with buffer
% Create simulated particles in 3D
% origin is the center of the camera X-axis points right, Y-axis points bototm 
nParticles = 200;
centroids = generateCentroids(nParticles, -50, 50, -50, 50, 220, 280);

lPts = projectPoints(centroids, cameraMatrix1');
rPts = projectPoints(centroids, cameraMatrix2');

centroidsInFrame = [];
buffer = 100;
minX = -buffer; maxX = imageSizeX + buffer;
minY = -buffer; maxY = imageSizeY + buffer;
for i = 1:nParticles
    if isInImage(lPts, i, minX, maxX, minY, maxY)... 
        || isInImage(rPts, i, minX, maxX, minY, maxY)
        centroidsInFrame = [centroidsInFrame; centroids(i, :)];
    end
end
nParticlesInFrame = size(centroidsInFrame, 1);

%% Generate 3D point clouds given the shape (cylinder + sphere) per centroids

nCylinders = 10;
nSpheres = nParticlesInFrame - nCylinders;
nCylinderPts = 1e6;
nSpherePts = 1e2;

% All in mm
cHeightMin = 0.3; cHeightMax = 2;
cRadiusMin = 0.025; cRadiusMax = 1;
sDiameterMin = 0.05; sDiameterMax = 1;

cHeights = (cHeightMax - cHeightMin) * rand([nCylinders, 1]) + cHeightMin;
cRadii = (cRadiusMax - cRadiusMin) * rand([nCylinders, 1]) + cRadiusMin;
sDiameters = (sDiameterMax - sDiameterMin) * rand([nSpheres, 1]) + sDiameterMin;

% Cylinders
yawD = 0; 
pitchD = 90*rand([nCylinders, 1]) -45;
rollD = 90*rand([nCylinders, 1]) - 45;
cylinders = zeros(nCylinders, nCylinderPts, 3);
spheres = zeros(nSpheres, (nSpherePts+1)^2, 3);
cylinderVol = pi * (cRadii.^2).*cHeights;
sphereVol = 4/3 * pi * (sDiameters/2).^3;
cylinderSpeed = cylinderVol/2;
sphereSpeed = sphereVol;
% Generate 3D cloud points of cylinders and spheres
for i = 1:nParticlesInFrame
    if i <= nCylinders
        cylinderPts = generateCylinder(cRadii(i), cHeights(i), nCylinderPts);
        cylinderPts = rotateCloud(cylinderPts, yawD, pitchD(i), rollD(i));
        cylinderPts = bsxfun(@plus, cylinderPts, centroidsInFrame(i, :));
        cylinders(i, :, :) = cylinderPts;
    else
        k = i - nCylinders;
        spherePts = generateSphere(nSpherePts, sDiameters(k));     
        spherePts = bsxfun(@plus, spherePts, centroidsInFrame(i, :));
        spheres(i-nCylinders, :, :) = spherePts;
    end
end


%% Capture particles image and move frame by frame
[~, lCameraPos] = extrinsicsToCameraPose(eye(3),...
                                        zeros(1, 3));
[~, rCameraPos] = extrinsicsToCameraPose(params.RotationOfCamera2,...
                                        params.TranslationOfCamera2);
camPoses = [lCameraPos; rCameraPos];
nFrames = 20;
speed = 0.3;
imgPair = zeros(2, imageSizeY, imageSizeX) + 50;
matchedPoints1 = [];
matchedPoints2 = [];
[columnsInImage rowsInImage] = meshgrid(1:imageSizeX, 1:imageSizeY);
camMatrix = zeros([2, size(cameraMatrix1)]);
camMatrix(1, :, :) = cameraMatrix1;
camMatrix(2, :, :) = cameraMatrix2;

id=1:nParticlesInFrame;
coord2D = zeros(2, nParticlesInFrame, 2);
coord3D = zeros(nParticlesInFrame, 3);
shapes = zeros(nParticlesInFrame, 1);

tracks = table();
for frameI=1:nFrames
    for i=1:nParticlesInFrame
        imgTemp = zeros(imageSizeY, imageSizeX);
        wasInFrame = [0 0];

        if frameI==1
            trace = particleTrace;
            newTrack = table(i, 0, 0, 0, 0, ...
                 255*rand(3, 1)', [NaN NaN], [NaN NaN NaN],...
                 [NaN NaN], {trace}, ...
                'VariableNames', {'id', 'age',  'totalVisibleCount', ...
                'totalInvisibleCount', 'consecutiveInvisibleCount', 'colour', ...
                'centroid', 'worldCoordinates', 'rightCoord2D', 'trace'
            });
            tracks = [tracks; newTrack];
        end
        for camI=1:2
            if (i <= nCylinders)
                curPts = squeeze(cylinders(i, :, :));
                shapes(i) = 1;
            else 
                k = i - nCylinders;
                curPts = squeeze(spheres(k, :, :));
            end
            pts = round(projectPoints(curPts, squeeze(camMatrix(camI, :, :))'))+1;
            coord2D(camI, i, :) = mean(pts, 2);
            coord3D(i, :) = mean(curPts)';
            dist = norm(centroidsInFrame(i, :) - camPoses(camI, :));
            COC = fl * fl / (N * (WD - fl))* (abs(dist - WD) / dist)/pxPitch/2;
            ptsMax = max(1, min([imageSizeX; imageSizeY], max(pts, [], 2) + floor(3*COC)));
            ptsMin = min([imageSizeX; imageSizeY], max(1, min(pts, [], 2) - floor(3*COC)));

            for j = 1:size(pts, 2)
                x = pts(1, j);
                y = pts(2, j);
                if isInImage(pts, j, 1, imageSizeX, 1, imageSizeY)
                    imgTemp(y, x) = 255;
                    wasInFrame(camI) = 1;
                end
            end
%             imgTemp2 = imgaussfilt(imgTemp(ptsMin(2):ptsMax(2), ptsMin(1):ptsMax(1)), COC);
%             imgTemp2 = imgTemp(ptsMin(2):ptsMax(2), ptsMin(1):ptsMax(1));
% % 
%             imgTemp(ptsMin(2):ptsMax(2), ptsMin(1):ptsMax(1)) = imgTemp2;
%             imgPair(camI, :, :) = squeeze(imgPair(camI, :, :)) + imgTemp;
        end
        if wasInFrame(1) == 1
            tracks.centroid(i, :) = squeeze(coord2D(1, i, :));
            if wasInFrame(2) == 1
                tracks.rightCoord2D(i, :) = squeeze(coord2D(2, i, :));
                tracks.worldCoordinates(i, :) = coord3D(i, :);
            end
            tracks.age(i) = tracks.age(i) + 1;
            tracks.totalVisibleCount(i) = tracks.totalVisibleCount(i) + 1;
            tracks.trace{i} = tracks.trace{i}.addDetected(squeeze(coord2D(1, i, :)));
        else
            if tracks.age(i) > 0
                tracks.age(i) = tracks.age(i) + 1;
                tracks.totalInvisibleCount(i) = tracks.totalInvisibleCount(i) + 1;
                tracks.consecutiveInvisibleCount(i) = tracks.consecutiveInvisibleCount(i) + 1;
            end
        end
    end
    
%     imwrite(squeeze(imgPair(1, :, :))./255, sprintf('cam_1_%d.tif', frameI), 'TIFF');
%     imwrite(squeeze(imgPair(2, :, :))./255, sprintf('cam_2_%d.tif', frameI), 'TIFF');
    
%     frameTable = table(id', coord3D, squeeze(coord2D(1, :, :)), ...
%                     squeeze(coord2D(2, :, :)), shapes, ...
%                     'VariableNames', {'id', 'coord3D', 'lCoord2D',...
%                     'rCoord2D', 'shapes'});
%     tableName = sprintf('groundtruth_%d.mat', frameI);
%     save(tableName, 'frameTable');
%     writetable(frameTable, ));
    imgPair = zeros(2, imageSizeY, imageSizeX) + 50;
    cylinders(:, :, 2) = cylinders(:, :, 2) + cylinderSpeed;
    spheres(:, :, 2) = spheres(:, :, 2) + sphereSpeed;
%     figure; 
%     imshow(squeeze(imgPair(1, :, :)), [0, 255]);
%     figure;
%     imshow(squeeze(imgPair(2, :, :)), [0, 255]);
end

% Remove tracks that did not appear at all
tracks(tracks.age == 0, :) = [];
save('tracksSimulated.mat', 'tracks');


function val = isInImage(pts, idx, minX, maxX, minY, maxY)
    val = (pts(1, idx) >= minX) && (pts(2, idx) >= minY) ...
               && pts(1, idx) <= maxX && (pts(2, idx) <= maxY);
end


function points2d = projectPoints(points3d, P)
    points3dHomog = [points3d, ones(size(points3d, 1), 1, 'like', points3d)]';
    points2dHomog = P * points3dHomog;
    points2d = bsxfun(@rdivide, points2dHomog(1:2, :), points2dHomog(3, :));
end


%%
% %% Filter out the particles outside of the imaging frame 
%     lImg3D = zeros(nCylinders, 2, 3); %left, center and right points in 3 dimensions
%     rPtsNew = zeros(nCylinders, 4);
%     lPtsNew = zeros(nCylinders, 2);
%     nLeftParticles = 0;
% for i = 1:nParticlesInFrame
%     lImgTemp = zeros(1944, 2592);
%     rImgTemp = zeros(1944, 2592);
%     if (i <= nCylinders)
%         curCylinderPts = squeeze(cylinders(i, :, :));
%         lPts = projectPoints(centroidsInFrame(i, :), cameraMatrix1');
%         nLeftParticles = nLeftParticles + 1;
% 
%         lPtsNew(nLeftParticles, :) = lPts;
% 
%         pt3dLeft = (220.*inv(intrinsics) * [lPts(1); lPts(2); 1])';
%         pt3dRight = (280.*inv(intrinsics) * [lPts(1); lPts(2); 1])';
%         lImg3D(nLeftParticles, :, :) = [pt3dLeft; pt3dRight];
% 
%         lPts = floor(projectPoints(curCylinderPts, cameraMatrix1'));
%         rPts = floor(projectPoints(curCylinderPts, cameraMatrix2'));
%         
%         points = projectPoints([pt3dLeft; pt3dRight], cameraMatrix2');
%         rPtsNew(nLeftParticles, :) = [points(1, :) points(2, :)];
%         lCOC = fl * fl / (N * (WD - fl))* (abs(centroidsInFrame(i, 3) - WD) / centroidsInFrame(i, 3))/pxPitch/2;
%         lBuffer = floor(3*lCOC);
%         lPtsMax = max(1, min([2592; 1944], max(lPts, [], 2) + lBuffer));
%         lPtsMin = min([2592; 1944], max(1, min(lPts, [], 2) - lBuffer));
% %         lPts = lPts - lPtsMin + floor(3*lCOC);
% %         frameSize = ceil(lPtsMax - lPtsMin + 6*lCOC);
% %         lImgTemp = zeros(frameSize(2), frameSize(1));
% %         lPtsMin = lPtsMin - floor(3*lCOC);
%         for j = 1:size(lPts, 2)
%             xl = lPts(1, j);
%             yl = lPts(2, j);
%             if isInImage(lPts, j)
%                 lImgTemp(yl, xl) = 255;
%                 lImg2(yl, xl) = 255;
%             end
%         end
%         lImgTemp2 = imgaussfilt(lImgTemp(lPtsMin(2):lPtsMax(2), lPtsMin(1):lPtsMax(1)), lCOC);
%         lImgTemp(lPtsMin(2):lPtsMax(2), lPtsMin(1):lPtsMax(1)) = lImgTemp2;
%         lImg = lImg+lImgTemp;
% %         lImgTemp = imgaussfilt(lImgTemp, lCOC);
% %         lImgTemp2(lPtsMin(2):lPtsMin(2)+frameSize(2)-1, lPtsMin(1):lPtsMin(1)+frameSize(1)-1) = lImgTemp;
% %         lImg = lImg + lImgTemp2;
% %         lImg = lImg + lImgTemp;
%         rDist = norm(centroidsInFrame(i, :) - rCameraPos);
%         rCOC = fl * fl / (N * (WD - fl))* (abs(rDist - WD) / rDist)/pxPitch/2;
%         rPtsCentroid = mean(rPts, 2);
%         rPtsMax = max(1, min([2592; 1944], max(rPts, [], 2) + floor(3*rCOC)));
%         rPtsMin = min([2592; 1944], max(1, min(rPts, [], 2) - floor(3*rCOC)));
%         for j = 1:size(rPts, 2)
%             xr = rPts(1, j);
%             yr = rPts(2, j);
%             if isInImage(rPts, j)
%                 rImgTemp(yr, xr) = 255;
% %                 rImg2(yl, xl) = 255;
%             end
%         end
%         rImgTemp2 = imgaussfilt(rImgTemp(rPtsMin(2):rPtsMax(2), rPtsMin(1):rPtsMax(1)), rCOC);
%         rImgTemp(rPtsMin(2):rPtsMax(2), rPtsMin(1):rPtsMax(1)) = rImgTemp2;
%         rImg = rImg+rImgTemp;
%     else
%         k = i - nCylinders;
%         spherePts = bsxfun(@plus, spherePts, centroidsInFrame(i, :));
%         spheres(k, :, :) = spherePts;
%         lPts = projectPoints(spherePts, cameraMatrix1');
%         rPts = projectPoints(spherePts, cameraMatrix2');
%         lCOC = fl * fl / (N * (WD - fl))* (abs(centroidsInFrame(i, 3) - WD) / centroidsInFrame(i, 3))/pxPitch/2;
%         for j = 1:size(lPts, 2)
%             xl = floor(lPts(1, j))+1;
%             yl = floor(lPts(2, j))+1;
%             if isInImage(lPts, j)
%                 lImgTemp(yl, xl) = 255;
%                 lImg2(yl, xl) = 255;
%             end
%         end
%         lImgTemp = imgaussfilt(lImgTemp, lCOC);
%         lImg = lImg + lImgTemp;
%         for j = 1:size(rPts, 2)
%             xr = floor(rPts(1, j))+1;
%             yr = floor(rPts(2, j))+1;
%             if isInImage(rPts, j)
%                 rImg(yr, xr) = 255;
%             end
%         end
%     end
% end
% imwrite(lImg./255, 'cam_1_1.tif', 'TIFF');
% imwrite(lImg2./255, 'cam_1_1_2.tif', 'TIFF');
% imwrite(abs(lImg2 - lImg)./255, 'cam_diff.tif', 'TIFF');
% % imwrite(rImg./255, 'cam_2_1.tif', 'TIFF');
% imwrite(rImg./255, 'cam_2_1_2.tif', 'TIFF');
% figure;
% hold on;
% imshow(lImg, [0, 255]);
% viscircles(lPtsNew, ones(nCylinders, 1)*150);
% figure; 
% hold on;
% imshow(rImg, [0, 255]);
% line(rPtsNew(:,[1, 2])',rPtsNew(:,[3, 4])');
% hold off;
% %% Particles simply fall on z-axis
% for frame=2:5
%     cylinders(:, :, 2) = cylinders(:, :, 2) + 0.5;
%     spheres(:, :, 2) = spheres(:, :, 2) + 0.5;
%     lImg = zeros(1944, 2592) + 50;
%     rImg = zeros(1944, 2592) + 50;
%     for i = 1:nParticlesInFrame
%        if (i <= nCylinders)
%             cylinderPts = squeeze(cylinders(i, :, :));
%             lPts = projectPoints(cylinderPts, cameraMatrix1');
%             rPts = projectPoints(cylinderPts, cameraMatrix2');
%             for j = 1:size(lPts, 2)
%                 xl = floor(lPts(1, j))+1;
%                 yl = floor(lPts(2, j))+1;
%                 if isInImage(lPts, j)
%                     lImg(yl, xl) = 255;
%                 end
%             end
%             for j = 1:size(rPts, 2)
%                 xr = floor(rPts(1, j))+1;
%                 yr = floor(rPts(2, j))+1;
%                 if isInImage(rPts, j)
%                     rImg(yr, xr) = 255;
%                 end
%             end
%         else
%             k = i - nCylinders;
%             spherePts = squeeze(spheres(k, :, :));
%             lPts = projectPoints(spherePts, cameraMatrix1');
%             rPts = projectPoints(spherePts, cameraMatrix2');
%             for j = 1:size(lPts, 2)
%                 xl = floor(lPts(1, j))+1;
%                 yl = floor(lPts(2, j))+1;
%                 if isInImage(lPts, j)
%                     lImg(yl, xl) = 255;
%                 end
%             end
%             for j = 1:size(rPts, 2)
%                 xr = floor(rPts(1, j))+1;
%                 yr = floor(rPts(2, j))+1;
%                 if isInImage(rPts, j)
%                     rImg(yr, xr) = 255;
%                 end
%             end
%         end 
%     end
%     imwrite(lImg./255, sprintf('cam_1_%d.tif', frame), 'TIFF');
%     imwrite(rImg./255, sprintf('cam_2_%d.tif', frame), 'TIFF');
% end
% 
% %     if isInImage(lPts, i) && isInImage(rPts, i)
% %       matchedPoints1 = [matchedPoints1; xl yl];
% %       matchedPoints2 = [matchedPoints2; xr yr];
% %     end
% % 
% %     if isInImage(lPts, i)
% %       circlePixels = (rowsInImage - yl).^2 ...
% %     + (columnsInImage - xl).^2 <= radius.^2;
% %       lImg(circlePixels) = 255;
% %     end
% %     if isInImage(rPts, i)
% %       circlePixels = (rowsInImage - yr).^2 ...
% %     + (columnsInImage - xr).^2 <= radius.^2;
% %       rImg(circlePixels) = 255;
% %     end
% % epiLines = epipolarLine(F, matchedPoints1);
% % points = lineToBorderPoints(epiLines,size(rImg));
% 
% 
% % xl=1086.93177507917; yl = 1244.60319725707; %zl=233.5553;
% 
% % for i=1:size(cylinderPts, 1)
% %     xl = floor(lPts(1, i));
% %     yl = floor(lPts(2, i));
% %     xr = floor(rPts(1, i));
% %     yr = floor(rPts(2, i));
% %     lImg(yl, xl) = 255;
% %     rImg(yr, xr) = 255;
% % %     circlePixels = (rowsInImage - yl).^2 ...
% % %     + (columnsInImage - xl).^2 <= radius.^2;
% % %       lImg(circlePixels) = 255;
% % %             circlePixels = (rowsInImage - yr).^2 ...
% % %     + (columnsInImage - xr).^2 <= radius.^2;
% % %       rImg(circlePixels) = 255;
% % end
% 
% % rPtsNew = projectPoints([pt3d1; pt3d2; pt3d3], cameraMatrix2');
% % circlePixels = (rowsInImage - yl).^2 ...
% %     + (columnsInImage - xl).^2 <= radius.^2;
% % lImg(circlePixels) = 255;
% % circlePixels = (rowsInImage - rPtsNew(2, 1)).^2 ...
% %     + (columnsInImage - rPtsNew(1, 1)).^2 <= radius.^2;
% % rImg(circlePixels) = 255;
% % circlePixels = (rowsInImage - rPtsNew(2, 2)).^2 ...
% %     + (columnsInImage - rPtsNew(1, 2)).^2 <= radius.^2;
% % rImg(circlePixels) = 255;
% % circlePixels = (rowsInImage - rPtsNew(2, 3)).^2 ...
% %     + (columnsInImage - rPtsNew(1, 3)).^2 <= (radius*2).^2;
% % rImg(circlePixels) = 255;
% figure; 
% hold on;
% imshow(lImg, [0 255]);
% hold off;
% 
% figure; 
% hold on;
% imshow(rImg, [0 255]);
% % line(points(:,[1,3])',points(:,[2,4])');
% hold off;
% 
